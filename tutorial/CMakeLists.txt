set(IMAGES images/gray.png images/rgb.png)

foreach (FILE IN LISTS IMAGES)
    configure_file("${FILE}" "${FILE}" COPYONLY)
endforeach ()

function(add_tutorial source_file)
    set(options WITH_IMAGE_IO WITH_OPENMP)
    set(oneValueArgs)
    set(multiValueArgs SRCS)
    cmake_parse_arguments(args "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    get_filename_component(name "${source_file}" NAME_WE)

    add_executable("${name}" "${source_file}")
    target_link_libraries("${name}" PRIVATE Halide::Halide Halide::Tools)
    target_compile_options(${name} PRIVATE "$<$<CXX_COMPILER_ID:GNU,Clang,AppleClang>:-Wno-unused-but-set-variable>")

    add_test(NAME tutorial_${name} COMMAND ${name})
    set_tests_properties(tutorial_${name} PROPERTIES LABELS tutorial)

    if (${args_WITH_IMAGE_IO})
        target_link_libraries(${name} PRIVATE Halide::ImageIO)
    endif ()

    if (${args_WITH_OPENMP})
        if (TARGET OpenMP::OpenMP_CXX)
            target_link_libraries(${name} PRIVATE OpenMP::OpenMP_CXX)
        else ()
            # Compile anyway but suppress warnings about unrecognised pragmas
            target_compile_options("${name}"
                                   PRIVATE
                                   $<$<CXX_COMPILER_ID:MSVC>:/Wd4068>
                                   $<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-Wno-unknown-pragmas>)
        endif ()
    endif ()
endfunction()

# Declare tutorials
add_tutorial(lesson_01_basics.cpp)
add_tutorial(lesson_02_input_image.cpp WITH_IMAGE_IO)
add_tutorial(lesson_03_debugging_1.cpp)
add_tutorial(lesson_04_debugging_2.cpp)
add_tutorial(lesson_05_scheduling_1.cpp)
add_tutorial(lesson_06_realizing_over_shifted_domains.cpp)
add_tutorial(lesson_07_multi_stage_pipelines.cpp WITH_IMAGE_IO)
add_tutorial(lesson_08_scheduling_2.cpp WITH_IMAGE_IO WITH_OPENMP)
add_tutorial(lesson_09_update_definitions.cpp WITH_IMAGE_IO WITH_OPENMP)
add_tutorial(lesson_11_cross_compilation.cpp)
add_tutorial(lesson_12_using_the_gpu.cpp WITH_IMAGE_IO)
add_tutorial(lesson_13_tuples.cpp)
add_tutorial(lesson_14_types.cpp)

option(BUILD_AOT_TUTORIAL "Build the ahead-of-time compilation tutorial" ON)
if (BUILD_AOT_TUTORIAL)
    # Tutorial 10 requires that we build generation code, then run it,
    # so we can build the final executable.
    add_tutorial(lesson_10_aot_compilation_generate.cpp)

    # LLVM may leak memory during Halide compilation. If projects are built with address sanitizer enabled,
    # this may cause generators to fail, making it hard to use Halide and address sanitizer at the same time.
    # To work around this, we execute generators with an environment setting to disable leak checking.
    set(FILTER_LIB "lesson_10_halide${CMAKE_STATIC_LIBRARY_SUFFIX}")
    add_custom_command(OUTPUT lesson_10_halide.h "${FILTER_LIB}"
                       DEPENDS lesson_10_aot_compilation_generate
                       COMMAND ${CMAKE_COMMAND} -E env "ASAN_OPTIONS=detect_leaks=0" $<TARGET_FILE:lesson_10_aot_compilation_generate>)
    add_custom_target(exec_lesson_10_aot_compilation_generate
                      DEPENDS lesson_10_halide.h "${FILTER_LIB}")

    # This will be linked with the code generated by
    # the generator (lesson_10_aot_compilation_generate)
    add_executable(lesson_10_aot_compilation_run lesson_10_aot_compilation_run.cpp)
    add_dependencies(lesson_10_aot_compilation_run exec_lesson_10_aot_compilation_generate)
    target_link_libraries(lesson_10_aot_compilation_run PRIVATE
                          "${CMAKE_CURRENT_BINARY_DIR}/${FILTER_LIB}"
                          Halide::Runtime # TODO: including this here makes too much available. The generated headers should be self-contained.
                          ${CMAKE_DL_LIBS}
                          Threads::Threads)
    target_include_directories(lesson_10_aot_compilation_run PRIVATE "${CMAKE_CURRENT_BINARY_DIR}")
endif ()
